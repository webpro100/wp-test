//----------------------------------------------------------------------
//MIXIN
//----------------------------------------------------------------------

@mixin transform($params, $backface: false) {
  @include prefix('transform', $params);
  @if $backface {
    -webkit-backface-visibility:hidden;
    backface-visibility:hidden;
  }
}
@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    left:50%;
    top:50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

@mixin box-shadow($shadow) {
  @include prefix('box-shadow',
          $shadow);
}

@mixin transition($property: all,
$duration: .3s,
$easing: ease) {
  $transitions: ($property $duration $easing);
  @include prefix('transition',
          $transitions);
}

@mixin user-select($select) {
  -webkit-touch-callout: $select;
  @include prefix('user-select',
          $select);
}

@mixin placeholder {
  ::-webkit-input-placeholder {
    @content
  }
  :-moz-placeholder {
    @content
  }
  ::-moz-placeholder {
    @content
  }
  :-ms-input-placeholder {
    @content
  }
}

@include placeholder {
  color: #4c4c4c;
  opacity: 1;
}

//Using placeholder next input
.text_pole {
  @include placeholder {
    color: #737373;
    opacity: 1;
  }
}

//----------------------------------------------------------------------
//FLEXBOX
//----------------------------------------------------------------------

@mixin flex($fg: 1, $fs: null, $fb: null) {
  $fg-boxflex: $fg;
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }
  flex: $fg $fs $fb;
}

@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

@mixin boxGrid($columnNumber, $spacingPercent) {
  $contentPercent: 100%;
  $sideMargin: ($spacingPercent/2);
  $marginInt: strip-units($sideMargin);
  @include justify-content(flex-start);
  @include flex-flow(wrap);
  @include transition();
  @include flexbox();
  margin: #{0} -#{$sideMargin};
  width: $contentPercent + $spacingPercent;
  > * {
    width: ($contentPercent/$columnNumber) - $spacingPercent;
    margin: 0 #{$sideMargin} ($marginInt + ($marginInt / $columnNumber) * 1em)
  }
}

@mixin for-size($size, $type: 'max') {
  @media (#{$type}-width: #{$size}) {
    @content;
  }
}

//Using @include declare-font('FontName', 'font-filename', 400, font-style);
@mixin declare-font($font-family, $font-filename, $font-weight: normal, $font-style: normal) {
  @font-face {
    font-family: '#{$font-family}';
    font-weight: $font-weight;
    font-style: $font-style;
    src: url('../fonts/#{$font-filename}.eot');
    src: url('../fonts/#{$font-filename}.eot?#iefix') format('embedded-opentype'), url('../fonts/#{$font-filename}.woff') format('woff'), url('../fonts/#{$font-filename}.ttf') format('truetype'),;
    font-display: swap;
  }
}